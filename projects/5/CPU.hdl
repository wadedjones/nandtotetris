// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

		/* getting all the instructions from the input */
		Mux16(a=false,
					b=instruction,
					sel=instruction[15],
					out[0]=cJGT,
					out[1]=cJEQ,
					out[2]=cJLT,
					out[3]=cDestM,
					out[3]=writeM,
					out[4]=cDestD,
					out[5]=cDestA,
					out[6]=aluNO,
					out[7]=aluF,
					out[8]=aluNY,
					out[9]=aluZY,
					out[10]=aluNX,
					out[11]=aluZX,
					out[12]=cAorM,
					out[15]=cType
				);
					


		ALU(x=xIn, 
				y=yIn,
				zx=aluZX,
				nx=aluNX,
				zy=aluZY,
				ny=aluNY,
				f=aluF,
				no=aluNO,
				out=aluOut, out=outM,
				zr=zerop,
				ng=negp);

		Or(a=zerop, b=negp, out=lteq);
		Not(in=lteq, out=posp);

		/* A register logic */
		Mux16(a=instruction, b=aluOut, sel=cType, out=aMuxOut);
		Mux16(a=aRegOut, b=inM, sel=cAorM, out=yIn);

		/* loading A Register */
		Not(in=cType, out=notcType);
		Or(a=notcType, b=cDestA, out=loadA);

		ARegister(in=aMuxOut, load=loadA, out=aRegOut, out[0..14]=addressM);

		/* loading D Register */
		DRegister(in=aluOut, load=cDestD, out=xIn);

		/* jump logic */

		And(a=cJEQ, b=zerop, out=JEQ);
		And(a=cJLT, b=negp, out=JLT);
		And(a=cJGT, b=posp, out=JGT);

		Or(a=JEQ, b=JLT, out=JLE);
		Or(a=JGT, b=JLE, out=jmp);

		PC(in=aRegOut, inc=true, load=jmp, reset=reset, out[0..14]=pc, out[15]=false);
}
